{"version":3,"sources":["webpack:///path---about-css-specificity-375496a44afa65ea6152.js","webpack:///./.cache/json/about-css-specificity.json"],"names":["webpackJsonp","480","module","exports","data","markdownRemark","html","timeToRead","excerpt","frontmatter","title","cover","date","category","tags","author","fields","slug","prev","next","authors","edges","node","id","name","image","url","bio","pathContext","total"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,4+cAA8qaC,WAAA,EAAAC,QAAA,4IAAAC,aAAq3DC,MAAA,wBAAAC,MAAA,mDAAAC,KAAA,aAAAC,SAAA,WAAAC,MAAA,6CAAAC,OAAA,OAAyMC,QAAWC,KAAA,2BAAiCC,MAASV,QAAA,0GAAAC,aAAqIC,MAAA,4CAAAC,MAAA,8CAAAC,KAAA,cAA8HI,QAAWC,KAAA,6CAAmDE,MAASX,QAAA,oHAAAC,aAA6IC,MAAA,6BAAAC,MAAA,0DAAAC,KAAA,cAA2HI,QAAWC,KAAA,+BAAqCG,SAAYC,QAAUC,MAAQC,GAAA,MAAAC,KAAA,YAAAC,MAAA,8BAAAC,IAAA,6BAAAC,IAAA,6CAAyJC,aAAgBX,KAAA,yBAAAY,MAAA,GAAAX,KAAA,2CAAAC,KAAA","file":"path---about-css-specificity-375496a44afa65ea6152.js","sourcesContent":["webpackJsonp([85978614291527],{\n\n/***/ 480:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2 id=\\\"what-is-specificity\\\"><a href=\\\"#what-is-specificity\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What is specificity?</h2>\\n<blockquote>\\n<p>Specificity is the means by which browsers decide which CSS property values are the most relevant to an element and, therefore, will be applied.</p>\\n<p>— <cite><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity\\\">MDN web docs</a></cite></p>\\n</blockquote>\\n<h2 id=\\\"what-does-this-mean\\\"><a href=\\\"#what-does-this-mean\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What does this mean?</h2>\\n<p>There are multiple ways to write a CSS selector and style an element on the page. Consider this simple case:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ul</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>list-item<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>featured-item<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span><span class=\\\"token punctuation\\\">></span></span>Lorem ipsum<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>list-item active<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span><span class=\\\"token punctuation\\\">></span></span>Dolor sit amet<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>list-item<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token style-attr language-css\\\"><span class=\\\"token attr-name\\\"> <span class=\\\"token attr-name\\\">style</span></span><span class=\\\"token punctuation\\\">=\\\"</span><span class=\\\"token attr-value\\\"><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span></span><span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span><span class=\\\"token punctuation\\\">></span></span>Consectetur adipiscing elit<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ul</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>We have multiple list items with different attributes. All these attributes, tags and contexts are ways we can reach out to that element with selectors to style them. There are different <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors\\\">types of selectors</a> so we can style an element a million ways. </p>\\n<p>Let's say we want to color every list item blue and the <code>featured-item</code> should be red. We write some CSS and magically it works but why? </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\">    <span class=\\\"token selector\\\">#featured-item</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token selector\\\">...\\n    li.list-item</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> blue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>We wrote two selectors and both of them are setting the same elements <code>color</code> property. A text cannot be blue and red at the same time. That's why browsers calculate selector specificity so they can decide which property definition is more specific. Every selector type has a score. The higher the score the more specific a selector is to an element.</p>\\n<h2 id=\\\"basic-rules-when-calculating-specificity\\\"><a href=\\\"#basic-rules-when-calculating-specificity\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Basic rules when calculating specificity</h2>\\n<ul>\\n<li>Specificity is only applied when the same element is targeted by multiple selector declarations.</li>\\n<li>Directly targeted elements will always take precedence over inherited selectors no matter what specificity the inherited rule has.</li>\\n<li>When declarations have equal specificity, the last one in order will be applied.</li>\\n<li>Tree proximity ignorance: When calculating a selector score the proximity of the elements in the document tree has no effect on specificity. These selectors have all the same score: <code>html .list-item</code>, <code>body .list-item</code>, <code>li.list-item</code></li>\\n<li>The specificity scoring system looks like this: <code>0,0,0,0</code></li>\\n<li>Each number is increased when a specific type of selector part is used. For example an id selectors score is <code>0.1.0.0</code>, a class selectors score is <code>0.0.1.0</code>, and an element selector is <code>0.0.0.1</code>.</li>\\n<li>When we combine these selector parts the score adds up (e.g., <code>body li.list-item</code> has a score of <code>0.0.1.2</code> because we have used 2 element selectors and a class selectos)</li>\\n<li>Inline styles (almost) always overwrite any styles in external stylesheets and could be considered as the selector with the highest specificity value with <code>1.0.0.0</code>. (The <code>!important</code> property exception will be covered later)</li>\\n<li>Only the form of a selector counts. The <code>[id=\\\"featured-item\\\"]</code> selector is considered as an attribute selector and not an ID.</li>\\n<li>A class selector beats any number of element selectors. Just like an ID selector beats any number of class selector. <a href=\\\"http://jsfiddle.net/Dp9CX/\\\">Demo CodePen with 12 classes vs 1 ID</a></li>\\n<li>The last rule overrides any previous, conflicting rule.</li>\\n<li>The embedded style sheet is always closer to the element. (In case we have two selectors styling the same element with the same specificity)</li>\\n<li>It's a good practice to minimize the number of selectors we use to style an element and to keep the specificity value as low as possible. (It could go ugly real fast if you have to create a higher specificity selector with hacks like this: <code>.list-item.list-item.list-item</code>)</li>\\n<li>Repeated occurrences of the same simple selector are allowed and do increase specificity. (e.g., <code>.list-item.list-item</code> is valid and has a specificity of <code>0.0.2.0</code>)</li>\\n</ul>\\n<blockquote>\\n<p>Memorize how to measure specificity:</p>\\n<p>“Start at 0, add 1000 for style attribute, add 100 for each ID, add 10 for each attribute, class or pseudo-class, add 1 for each element name or pseudo-element. ”</p>\\n<p>— <cite><a href=\\\"https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/\\\">Smashing Magazine</a></cite></p>\\n</blockquote>\\n<h2 id=\\\"selector-types-that-increase-specificity\\\"><a href=\\\"#selector-types-that-increase-specificity\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Selector types that increase specificity</h2>\\n<ul>\\n<li>ID selectors (e.g., <code>#featured-item</code>) -> <code>0.1.0.0</code></li>\\n<li>Class selectors (e.g., <code>.list-item</code>), attribute selectors (e.g., <code>[id]</code>) and pseudo-classes (e.g. <code>:hover</code>, <code>:nth-child()</code>, <code>:nth-last-child()</code>)  -> <code>0.0.1.0</code></li>\\n<li>Type selectors (e.g., <code>li</code>) and pseudo-elements (e.g., <code>::before</code>) -> <code>0.0.0.1</code></li>\\n<li>Selectors declared inside of <code>:not()</code></li>\\n<li>The most specific selector inside <code>:matches()</code> or <code>:has()</code></li>\\n</ul>\\n<h2 id=\\\"selectors-that-have-no-effect-on-specificity\\\"><a href=\\\"#selectors-that-have-no-effect-on-specificity\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Selectors that have no effect on specificity</h2>\\n<ul>\\n<li>Inherited values</li>\\n<li>Universal selector (<code>*</code>)</li>\\n<li>Combinators (<code>+</code>, <code>></code>, <code>~</code>, <code></code>)</li>\\n<li>Negation pseudo-class itself (<code>:not()</code>).</li>\\n<li>A <code>:something()</code> pseudo-class</li>\\n</ul>\\n<h2 id=\\\"the-important-exceptions\\\"><a href=\\\"#the-important-exceptions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>The <code>!important</code> exceptions</h2>\\n<ul>\\n<li>The <code>!important</code> value appended to a property value (e.g., <code>font-size: 33px !important;</code>) overrides even inline styles.</li>\\n<li>Using <code>!important</code> is strongly discouraged as it could produce unexpected property behavior. Most of the times it is considered a bad practice to solve a problem permanently with <code>!important</code>.</li>\\n<li>To override an <code>!important</code> property is only possible via another <code>!important</code> value within a selector with a same or higher specificity score.</li>\\n<li>\\n<p>Some rules of thumb:</p>\\n<blockquote>\\n<ul>\\n<li>Always look for a way to use specificity before even considering <code>!important</code></li>\\n<li>Only use <code>!important</code> on page-specific CSS that overrides foreign CSS (from external libraries, like Bootstrap or normalize.css).</li>\\n<li>Never use <code>!important</code> when you're writing a plugin/mashup.</li>\\n<li>Never use <code>!important</code> on site-wide CSS.</li>\\n</ul>\\n<p>— <cite><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity\\\">Specificity - CSS | MDN</a></cite></p>\\n</blockquote>\\n</li>\\n</ul>\\n<h2 id=\\\"calculators\\\"><a href=\\\"#calculators\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Calculators</h2>\\n<p><a href=\\\"https://specificity.keegan.st/\\\">Specificity calculator of Keegan Street</a></p>\",\"timeToRead\":5,\"excerpt\":\"What is specificity? Specificity is the means by which browsers decide which CSS property values are the most relevant to an element and…\",\"frontmatter\":{\"title\":\"About CSS specificity\",\"cover\":\"https://unsplash.it/1280/900/?random?specificity\",\"date\":\"03/07/2018\",\"category\":\"research\",\"tags\":[\"research\",\"css\",\"css-basics\",\"specificity\"],\"author\":\"fil\"},\"fields\":{\"slug\":\"/about-css-specificity\"}},\"prev\":{\"excerpt\":\"WTF JS explanation for \\\"Almost but not quite\\\" Premise —   wtfjs.com - Almost but not quite Explanation…\",\"frontmatter\":{\"title\":\"WTF JS explanation - Almost but not quite\",\"cover\":\"https://unsplash.it/1280/900/?random?almost\",\"date\":\"03/09/2018\"},\"fields\":{\"slug\":\"/wtf-js-explanation-almost-but-not-quite\"}},\"next\":{\"excerpt\":\"As I was trying to understand the exact process how a  logical NOT unary  is working in JavaScript I encountered…\",\"frontmatter\":{\"title\":\"Javascript Spec - GetValue\",\"cover\":\"https://unsplash.it/1280/900/?random?ecmascriptgetvalue\",\"date\":\"03/25/2018\"},\"fields\":{\"slug\":\"/javascript-spec-get-value\"}},\"authors\":{\"edges\":[{\"node\":{\"id\":\"fil\",\"name\":\"Fil Flora\",\"image\":\"/blog/images/fil-avatar.png\",\"url\":\"http://nexiuslearning.com/\",\"bio\":\"Front-end developer @ Nexius Learning\"}}]}},\"pathContext\":{\"slug\":\"/about-css-specificity\",\"total\":14,\"prev\":\"/wtf-js-explanation-almost-but-not-quite\",\"next\":\"/javascript-spec-get-value\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---about-css-specificity-375496a44afa65ea6152.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2 id=\\\"what-is-specificity\\\"><a href=\\\"#what-is-specificity\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What is specificity?</h2>\\n<blockquote>\\n<p>Specificity is the means by which browsers decide which CSS property values are the most relevant to an element and, therefore, will be applied.</p>\\n<p>— <cite><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity\\\">MDN web docs</a></cite></p>\\n</blockquote>\\n<h2 id=\\\"what-does-this-mean\\\"><a href=\\\"#what-does-this-mean\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What does this mean?</h2>\\n<p>There are multiple ways to write a CSS selector and style an element on the page. Consider this simple case:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-html\\\"><code class=\\\"language-html\\\">    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ul</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>list-item<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">id</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>featured-item<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span><span class=\\\"token punctuation\\\">></span></span>Lorem ipsum<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>list-item active<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span><span class=\\\"token punctuation\\\">></span></span>Dolor sit amet<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">class</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>list-item<span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token style-attr language-css\\\"><span class=\\\"token attr-name\\\"> <span class=\\\"token attr-name\\\">style</span></span><span class=\\\"token punctuation\\\">=\\\"</span><span class=\\\"token attr-value\\\"><span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span></span><span class=\\\"token punctuation\\\">\\\"</span></span><span class=\\\"token punctuation\\\">></span></span>\\n            <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>span</span><span class=\\\"token punctuation\\\">></span></span>Consectetur adipiscing elit<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>span</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ul</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>We have multiple list items with different attributes. All these attributes, tags and contexts are ways we can reach out to that element with selectors to style them. There are different <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors\\\">types of selectors</a> so we can style an element a million ways. </p>\\n<p>Let's say we want to color every list item blue and the <code>featured-item</code> should be red. We write some CSS and magically it works but why? </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-css\\\"><code class=\\\"language-css\\\">    <span class=\\\"token selector\\\">#featured-item</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> red<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token selector\\\">...\\n    li.list-item</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token property\\\">color</span><span class=\\\"token punctuation\\\">:</span> blue<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>We wrote two selectors and both of them are setting the same elements <code>color</code> property. A text cannot be blue and red at the same time. That's why browsers calculate selector specificity so they can decide which property definition is more specific. Every selector type has a score. The higher the score the more specific a selector is to an element.</p>\\n<h2 id=\\\"basic-rules-when-calculating-specificity\\\"><a href=\\\"#basic-rules-when-calculating-specificity\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Basic rules when calculating specificity</h2>\\n<ul>\\n<li>Specificity is only applied when the same element is targeted by multiple selector declarations.</li>\\n<li>Directly targeted elements will always take precedence over inherited selectors no matter what specificity the inherited rule has.</li>\\n<li>When declarations have equal specificity, the last one in order will be applied.</li>\\n<li>Tree proximity ignorance: When calculating a selector score the proximity of the elements in the document tree has no effect on specificity. These selectors have all the same score: <code>html .list-item</code>, <code>body .list-item</code>, <code>li.list-item</code></li>\\n<li>The specificity scoring system looks like this: <code>0,0,0,0</code></li>\\n<li>Each number is increased when a specific type of selector part is used. For example an id selectors score is <code>0.1.0.0</code>, a class selectors score is <code>0.0.1.0</code>, and an element selector is <code>0.0.0.1</code>.</li>\\n<li>When we combine these selector parts the score adds up (e.g., <code>body li.list-item</code> has a score of <code>0.0.1.2</code> because we have used 2 element selectors and a class selectos)</li>\\n<li>Inline styles (almost) always overwrite any styles in external stylesheets and could be considered as the selector with the highest specificity value with <code>1.0.0.0</code>. (The <code>!important</code> property exception will be covered later)</li>\\n<li>Only the form of a selector counts. The <code>[id=\\\"featured-item\\\"]</code> selector is considered as an attribute selector and not an ID.</li>\\n<li>A class selector beats any number of element selectors. Just like an ID selector beats any number of class selector. <a href=\\\"http://jsfiddle.net/Dp9CX/\\\">Demo CodePen with 12 classes vs 1 ID</a></li>\\n<li>The last rule overrides any previous, conflicting rule.</li>\\n<li>The embedded style sheet is always closer to the element. (In case we have two selectors styling the same element with the same specificity)</li>\\n<li>It's a good practice to minimize the number of selectors we use to style an element and to keep the specificity value as low as possible. (It could go ugly real fast if you have to create a higher specificity selector with hacks like this: <code>.list-item.list-item.list-item</code>)</li>\\n<li>Repeated occurrences of the same simple selector are allowed and do increase specificity. (e.g., <code>.list-item.list-item</code> is valid and has a specificity of <code>0.0.2.0</code>)</li>\\n</ul>\\n<blockquote>\\n<p>Memorize how to measure specificity:</p>\\n<p>“Start at 0, add 1000 for style attribute, add 100 for each ID, add 10 for each attribute, class or pseudo-class, add 1 for each element name or pseudo-element. ”</p>\\n<p>— <cite><a href=\\\"https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/\\\">Smashing Magazine</a></cite></p>\\n</blockquote>\\n<h2 id=\\\"selector-types-that-increase-specificity\\\"><a href=\\\"#selector-types-that-increase-specificity\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Selector types that increase specificity</h2>\\n<ul>\\n<li>ID selectors (e.g., <code>#featured-item</code>) -> <code>0.1.0.0</code></li>\\n<li>Class selectors (e.g., <code>.list-item</code>), attribute selectors (e.g., <code>[id]</code>) and pseudo-classes (e.g. <code>:hover</code>, <code>:nth-child()</code>, <code>:nth-last-child()</code>)  -> <code>0.0.1.0</code></li>\\n<li>Type selectors (e.g., <code>li</code>) and pseudo-elements (e.g., <code>::before</code>) -> <code>0.0.0.1</code></li>\\n<li>Selectors declared inside of <code>:not()</code></li>\\n<li>The most specific selector inside <code>:matches()</code> or <code>:has()</code></li>\\n</ul>\\n<h2 id=\\\"selectors-that-have-no-effect-on-specificity\\\"><a href=\\\"#selectors-that-have-no-effect-on-specificity\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Selectors that have no effect on specificity</h2>\\n<ul>\\n<li>Inherited values</li>\\n<li>Universal selector (<code>*</code>)</li>\\n<li>Combinators (<code>+</code>, <code>></code>, <code>~</code>, <code></code>)</li>\\n<li>Negation pseudo-class itself (<code>:not()</code>).</li>\\n<li>A <code>:something()</code> pseudo-class</li>\\n</ul>\\n<h2 id=\\\"the-important-exceptions\\\"><a href=\\\"#the-important-exceptions\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>The <code>!important</code> exceptions</h2>\\n<ul>\\n<li>The <code>!important</code> value appended to a property value (e.g., <code>font-size: 33px !important;</code>) overrides even inline styles.</li>\\n<li>Using <code>!important</code> is strongly discouraged as it could produce unexpected property behavior. Most of the times it is considered a bad practice to solve a problem permanently with <code>!important</code>.</li>\\n<li>To override an <code>!important</code> property is only possible via another <code>!important</code> value within a selector with a same or higher specificity score.</li>\\n<li>\\n<p>Some rules of thumb:</p>\\n<blockquote>\\n<ul>\\n<li>Always look for a way to use specificity before even considering <code>!important</code></li>\\n<li>Only use <code>!important</code> on page-specific CSS that overrides foreign CSS (from external libraries, like Bootstrap or normalize.css).</li>\\n<li>Never use <code>!important</code> when you're writing a plugin/mashup.</li>\\n<li>Never use <code>!important</code> on site-wide CSS.</li>\\n</ul>\\n<p>— <cite><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity\\\">Specificity - CSS | MDN</a></cite></p>\\n</blockquote>\\n</li>\\n</ul>\\n<h2 id=\\\"calculators\\\"><a href=\\\"#calculators\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Calculators</h2>\\n<p><a href=\\\"https://specificity.keegan.st/\\\">Specificity calculator of Keegan Street</a></p>\",\"timeToRead\":5,\"excerpt\":\"What is specificity? Specificity is the means by which browsers decide which CSS property values are the most relevant to an element and…\",\"frontmatter\":{\"title\":\"About CSS specificity\",\"cover\":\"https://unsplash.it/1280/900/?random?specificity\",\"date\":\"03/07/2018\",\"category\":\"research\",\"tags\":[\"research\",\"css\",\"css-basics\",\"specificity\"],\"author\":\"fil\"},\"fields\":{\"slug\":\"/about-css-specificity\"}},\"prev\":{\"excerpt\":\"WTF JS explanation for \\\"Almost but not quite\\\" Premise —   wtfjs.com - Almost but not quite Explanation…\",\"frontmatter\":{\"title\":\"WTF JS explanation - Almost but not quite\",\"cover\":\"https://unsplash.it/1280/900/?random?almost\",\"date\":\"03/09/2018\"},\"fields\":{\"slug\":\"/wtf-js-explanation-almost-but-not-quite\"}},\"next\":{\"excerpt\":\"As I was trying to understand the exact process how a  logical NOT unary  is working in JavaScript I encountered…\",\"frontmatter\":{\"title\":\"Javascript Spec - GetValue\",\"cover\":\"https://unsplash.it/1280/900/?random?ecmascriptgetvalue\",\"date\":\"03/25/2018\"},\"fields\":{\"slug\":\"/javascript-spec-get-value\"}},\"authors\":{\"edges\":[{\"node\":{\"id\":\"fil\",\"name\":\"Fil Flora\",\"image\":\"/blog/images/fil-avatar.png\",\"url\":\"http://nexiuslearning.com/\",\"bio\":\"Front-end developer @ Nexius Learning\"}}]}},\"pathContext\":{\"slug\":\"/about-css-specificity\",\"total\":14,\"prev\":\"/wtf-js-explanation-almost-but-not-quite\",\"next\":\"/javascript-spec-get-value\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/about-css-specificity.json\n// module id = 480\n// module chunks = 85978614291527"],"sourceRoot":""}