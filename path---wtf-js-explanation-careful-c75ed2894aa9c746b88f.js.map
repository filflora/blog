{"version":3,"sources":["webpack:///path---wtf-js-explanation-careful-c75ed2894aa9c746b88f.js","webpack:///./.cache/json/wtf-js-explanation-careful.json"],"names":["webpackJsonp","518","module","exports","data","markdownRemark","html","timeToRead","excerpt","frontmatter","title","cover","date","category","tags","author","fields","slug","prev","next","authors","edges","node","id","name","image","url","bio","pathContext","total"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,goMAAuvMC,WAAA,EAAAC,QAAA,+IAAAC,aAA0QC,MAAA,+BAAAC,MAAA,+CAAAC,KAAA,aAAAC,SAAA,cAAAC,MAAA,wCAAAC,OAAA,OAA0MC,QAAWC,KAAA,gCAAsCC,MAASV,QAAA,oHAAAC,aAA6IC,MAAA,6BAAAC,MAAA,0DAAAC,KAAA,cAA2HI,QAAWC,KAAA,+BAAqCE,MAASX,QAAA,mHAAAC,aAA4IC,MAAA,yCAAAC,MAAA,6EAAAC,KAAA,cAA0JI,QAAWC,KAAA,2CAAiDG,SAAYC,QAAUC,MAAQC,GAAA,MAAAC,KAAA,YAAAC,MAAA,8BAAAC,IAAA,6BAAAC,IAAA,6CAAyJC,aAAgBX,KAAA,8BAAAY,MAAA,GAAAX,KAAA,6BAAAC,KAAA","file":"path---wtf-js-explanation-careful-c75ed2894aa9c746b88f.js","sourcesContent":["webpackJsonp([131965920419386],{\n\n/***/ 518:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"premise\\\"><a href=\\\"#premise\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Premise</h1>\\n<blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre>\\n      </div>\\n<p>Arrays evaluate as true in a boolean condition so this does make some sense even if it doesn't read very well! </p>\\n<p>— <cite><a href=\\\"https://wtfjs.com/wtfs/2010-02-15-careful\\\">Careful - WTFJS</a></cite></p>\\n</blockquote>\\n<h2 id=\\\"explanation\\\"><a href=\\\"#explanation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Explanation</h2>\\n<p>This seems a bit counter intuitive at first. Until we understand what is happening.</p>\\n<p>Before examining the whole equality the right hand side <code>![]</code> expression needs to be evaluated. The <strong>logical NOT operator</strong> is considered to be a <code>ToBoolean(x)</code> explicit coercion. As <code>[]</code> is considered truthy (<code>Boolean([])</code> is  <code>true</code>), the <code>!true</code> expression is <code>false</code>.</p>\\n<p>So the actual equality is this: <code>[] == false</code>.</p>\\n<p>According to the <a href=\\\"https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\\\">spec</a> if an Abstract Equality Comparison contains a boolean side it should be converted <code>ToNumber(false)</code> first, which is <code>0</code>.</p>\\n<p>The new equality is: <code>[] == 0</code>.</p>\\n<p>Now we focus on the Object and have to call <code>ToPrimitive([])</code> which is <code>\\\"\\\"</code> (because <code>[].valueOf()</code> is still not a primitive, a <code>[].toString()</code> is called).</p>\\n<p>The new equality is: <code>\\\"\\\" == 0</code>. Now we are getting closer. We still have one step to go.</p>\\n<blockquote>\\n<p>If <code>Type(x)</code> is String and <code>Type(y)</code> is Number,\\nreturn the result of the comparison <code>ToNumber(x) == y</code>.</p>\\n<p>— <cite><a href=\\\"https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\\\">Abstract Equality Operator - Spec</a></cite></p>\\n</blockquote>\\n<p>As a last step we have to convert <code>\\\"\\\"</code> to Number with <code>ToNumber(\\\"\\\")</code>. This results in <code>0</code> also and we can see that <code>0 == 0</code> is true.</p>\\n<p>This was quite a bumpy road to go down but we are now there. I have a strange feeling now, like when someone wants to tell me that <code>1 + 1 = 3</code> is true... However the console doesn't lie. Let's break it down into actual steps:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// First, let's see only the right side</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true ([] is truthy)</span>\\n<span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n\\n<span class=\\\"token comment\\\">// let's put it back into the original line</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n\\n<span class=\\\"token comment\\\">// we have a boolean -> ToNumber(false) conversion that is 0</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n\\n<span class=\\\"token comment\\\">// we have an object -> ToPrimitive([]) conversion that is \\\"\\\"</span>\\n<span class=\\\"token string\\\">\\\"\\\"</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n\\n<span class=\\\"token comment\\\">// we have a string -> ToNumber(\\\"\\\") conversion that is 0 </span>\\n<span class=\\\"token comment\\\">// Note! This is NOT parseInt(\\\"\\\")</span>\\n<span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n\\n<span class=\\\"token comment\\\">// The conclusion is that:</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre>\\n      </div>\",\"timeToRead\":2,\"excerpt\":\"Premise Arrays evaluate as true in a boolean condition so this does make some sense even if it doesn't read very well!  —   Careful - WTFJS…\",\"frontmatter\":{\"title\":\"WTF JS explanation - careful\",\"cover\":\"https://unsplash.it/1280/900/?random?careful\",\"date\":\"03/25/2018\",\"category\":\"explanation\",\"tags\":[\"explanation\",\"js\",\"wtf-js\",\"variable\"],\"author\":\"fil\"},\"fields\":{\"slug\":\"/wtf-js-explanation-careful\"}},\"prev\":{\"excerpt\":\"As I was trying to understand the exact process how a  logical NOT unary  is working in JavaScript I encountered…\",\"frontmatter\":{\"title\":\"Javascript Spec - GetValue\",\"cover\":\"https://unsplash.it/1280/900/?random?ecmascriptgetvalue\",\"date\":\"03/25/2018\"},\"fields\":{\"slug\":\"/javascript-spec-get-value\"}},\"next\":{\"excerpt\":\"Declaration comes first In Javascript a declaration is an expression that announces the existence of a variable…\",\"frontmatter\":{\"title\":\"Terminology: declaration vs definition\",\"cover\":\"https://picsum.photos/1280/900/?random%3Fjavascriptdeclarationvsdefinition\",\"date\":\"03/24/2018\"},\"fields\":{\"slug\":\"/terminology-declaration-vs-definition\"}},\"authors\":{\"edges\":[{\"node\":{\"id\":\"fil\",\"name\":\"Fil Flora\",\"image\":\"/blog/images/fil-avatar.png\",\"url\":\"http://nexiuslearning.com/\",\"bio\":\"Front-end developer @ Nexius Learning\"}}]}},\"pathContext\":{\"slug\":\"/wtf-js-explanation-careful\",\"total\":14,\"prev\":\"/javascript-spec-get-value\",\"next\":\"/terminology-declaration-vs-definition\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---wtf-js-explanation-careful-c75ed2894aa9c746b88f.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1 id=\\\"premise\\\"><a href=\\\"#premise\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Premise</h1>\\n<blockquote>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre>\\n      </div>\\n<p>Arrays evaluate as true in a boolean condition so this does make some sense even if it doesn't read very well! </p>\\n<p>— <cite><a href=\\\"https://wtfjs.com/wtfs/2010-02-15-careful\\\">Careful - WTFJS</a></cite></p>\\n</blockquote>\\n<h2 id=\\\"explanation\\\"><a href=\\\"#explanation\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Explanation</h2>\\n<p>This seems a bit counter intuitive at first. Until we understand what is happening.</p>\\n<p>Before examining the whole equality the right hand side <code>![]</code> expression needs to be evaluated. The <strong>logical NOT operator</strong> is considered to be a <code>ToBoolean(x)</code> explicit coercion. As <code>[]</code> is considered truthy (<code>Boolean([])</code> is  <code>true</code>), the <code>!true</code> expression is <code>false</code>.</p>\\n<p>So the actual equality is this: <code>[] == false</code>.</p>\\n<p>According to the <a href=\\\"https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\\\">spec</a> if an Abstract Equality Comparison contains a boolean side it should be converted <code>ToNumber(false)</code> first, which is <code>0</code>.</p>\\n<p>The new equality is: <code>[] == 0</code>.</p>\\n<p>Now we focus on the Object and have to call <code>ToPrimitive([])</code> which is <code>\\\"\\\"</code> (because <code>[].valueOf()</code> is still not a primitive, a <code>[].toString()</code> is called).</p>\\n<p>The new equality is: <code>\\\"\\\" == 0</code>. Now we are getting closer. We still have one step to go.</p>\\n<blockquote>\\n<p>If <code>Type(x)</code> is String and <code>Type(y)</code> is Number,\\nreturn the result of the comparison <code>ToNumber(x) == y</code>.</p>\\n<p>— <cite><a href=\\\"https://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\\\">Abstract Equality Operator - Spec</a></cite></p>\\n</blockquote>\\n<p>As a last step we have to convert <code>\\\"\\\"</code> to Number with <code>ToNumber(\\\"\\\")</code>. This results in <code>0</code> also and we can see that <code>0 == 0</code> is true.</p>\\n<p>This was quite a bumpy road to go down but we are now there. I have a strange feeling now, like when someone wants to tell me that <code>1 + 1 = 3</code> is true... However the console doesn't lie. Let's break it down into actual steps:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// First, let's see only the right side</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true ([] is truthy)</span>\\n<span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\n\\n<span class=\\\"token comment\\\">// let's put it back into the original line</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n\\n<span class=\\\"token comment\\\">// we have a boolean -> ToNumber(false) conversion that is 0</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n\\n<span class=\\\"token comment\\\">// we have an object -> ToPrimitive([]) conversion that is \\\"\\\"</span>\\n<span class=\\\"token string\\\">\\\"\\\"</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n\\n<span class=\\\"token comment\\\">// we have a string -> ToNumber(\\\"\\\") conversion that is 0 </span>\\n<span class=\\\"token comment\\\">// Note! This is NOT parseInt(\\\"\\\")</span>\\n<span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n\\n<span class=\\\"token comment\\\">// The conclusion is that:</span>\\n<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre>\\n      </div>\",\"timeToRead\":2,\"excerpt\":\"Premise Arrays evaluate as true in a boolean condition so this does make some sense even if it doesn't read very well!  —   Careful - WTFJS…\",\"frontmatter\":{\"title\":\"WTF JS explanation - careful\",\"cover\":\"https://unsplash.it/1280/900/?random?careful\",\"date\":\"03/25/2018\",\"category\":\"explanation\",\"tags\":[\"explanation\",\"js\",\"wtf-js\",\"variable\"],\"author\":\"fil\"},\"fields\":{\"slug\":\"/wtf-js-explanation-careful\"}},\"prev\":{\"excerpt\":\"As I was trying to understand the exact process how a  logical NOT unary  is working in JavaScript I encountered…\",\"frontmatter\":{\"title\":\"Javascript Spec - GetValue\",\"cover\":\"https://unsplash.it/1280/900/?random?ecmascriptgetvalue\",\"date\":\"03/25/2018\"},\"fields\":{\"slug\":\"/javascript-spec-get-value\"}},\"next\":{\"excerpt\":\"Declaration comes first In Javascript a declaration is an expression that announces the existence of a variable…\",\"frontmatter\":{\"title\":\"Terminology: declaration vs definition\",\"cover\":\"https://picsum.photos/1280/900/?random%3Fjavascriptdeclarationvsdefinition\",\"date\":\"03/24/2018\"},\"fields\":{\"slug\":\"/terminology-declaration-vs-definition\"}},\"authors\":{\"edges\":[{\"node\":{\"id\":\"fil\",\"name\":\"Fil Flora\",\"image\":\"/blog/images/fil-avatar.png\",\"url\":\"http://nexiuslearning.com/\",\"bio\":\"Front-end developer @ Nexius Learning\"}}]}},\"pathContext\":{\"slug\":\"/wtf-js-explanation-careful\",\"total\":14,\"prev\":\"/javascript-spec-get-value\",\"next\":\"/terminology-declaration-vs-definition\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/wtf-js-explanation-careful.json\n// module id = 518\n// module chunks = 131965920419386"],"sourceRoot":""}