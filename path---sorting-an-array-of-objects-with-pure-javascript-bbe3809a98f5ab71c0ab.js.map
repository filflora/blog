{"version":3,"sources":["webpack:///path---sorting-an-array-of-objects-with-pure-javascript-bbe3809a98f5ab71c0ab.js","webpack:///./.cache/json/sorting-an-array-of-objects-with-pure-javascript.json"],"names":["webpackJsonp","487","module","exports","data","markdownRemark","html","timeToRead","excerpt","frontmatter","title","cover","date","category","tags","author","fields","slug","prev","next","authors","edges","node","id","name","image","url","bio","pathContext","total"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,y6mBAA8knBC,WAAA,EAAAC,QAAA,6IAAAC,aAAy5BC,MAAA,mDAAAC,MAAA,2CAAAC,KAAA,aAAAC,SAAA,SAAAC,MAAA,8BAAAC,OAAA,OAA2MC,QAAWC,KAAA,sDAA4DC,MAASV,QAAA,mHAAAC,aAA4IC,MAAA,yCAAAC,MAAA,6EAAAC,KAAA,cAA0JI,QAAWC,KAAA,2CAAiDE,MAASX,QAAA,+GAAAC,aAAwIC,MAAA,iCAAAC,MAAA,iDAAAC,KAAA,cAAsHI,QAAWC,KAAA,mCAAyCG,SAAYC,QAAUC,MAAQC,GAAA,MAAAC,KAAA,YAAAC,MAAA,8BAAAC,IAAA,6BAAAC,IAAA,6CAAyJC,aAAgBX,KAAA,oDAAAY,MAAA,GAAAX,KAAA,yCAAAC,KAAA","file":"path---sorting-an-array-of-objects-with-pure-javascript-bbe3809a98f5ab71c0ab.js","sourcesContent":["webpackJsonp([40027628985182],{\n\n/***/ 487:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3 id=\\\"the-basics\\\"><a href=\\\"#the-basics\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>The basics</h3>\\n<p>Let's cover up in short how can we sort an Array in Vanilla Javascript.</p>\\n<p>Suppose that we have a simple array of strings: <code>[\\\"ij\\\", \\\"cd\\\", \\\"kl\\\", \\\"ef\\\", \\\"gh\\\", \\\"ab\\\"]</code></p>\\n<p>If we want to simply sort it in an ascending order we can use the <code>Array.prototype.sort</code> method:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"ij\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"cd\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"kl\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"ef\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"gh\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"ab\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"ab\\\", \\\"cd\\\", \\\"ef\\\", \\\"gh\\\", \\\"ij\\\", \\\"kl\\\"]</span>\\n</code></pre>\\n      </div>\\n<p>In case a reverse order is needed we can use the <code>Array.prototype.reverse</code> for this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"ij\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"cd\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"kl\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"ef\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"gh\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"ab\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"kl\\\", \\\"ij\\\", \\\"gh\\\", \\\"ef\\\", \\\"cd\\\", \\\"ab\\\"]</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"what-about-numbers\\\"><a href=\\\"#what-about-numbers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What about numbers?</h3>\\n<p>Unfortunately the simple <code>sort</code> orders array items as <code>String</code>s. So in case of an array of numbers there is no delight by writing this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">59</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1, 100, 12, 20, 4, 5, 59]</span>\\n</code></pre>\\n      </div>\\n<p>As we can see after <code>1</code> we have <code>100</code> and not <code>4</code>. Fortunately the <code>Array.prototype.sort</code> function is a <code>higher-order function</code> (which means it can receive a function as an argument) and its only argument is a <code>comparator function</code>.</p>\\n<p>This is the definition of the <code>comparator function</code> in the ECMAScript Spec:</p>\\n<blockquote>\\n<p>If <code>comparefn</code> is not undefined, it should be a function that accepts two arguments <code>x</code> and <code>y</code> and returns a <strong>negative value</strong> if <code>x &#x3C; y</code>, <strong>zero</strong> if <code>x = y</code>, or a <strong>positive value</strong> if <code>x > y</code>.</p>\\n<p>â€” <cite><a href=\\\"https://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.11\\\">Array.prototype.sort -- ecma-international.org</a></cite></p>\\n</blockquote>\\n<p>The easiest win for ordering the array by numbers is this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">59</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> a <span class=\\\"token operator\\\">-</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1, 4, 5, 12, 20, 59, 100]</span>\\n</code></pre>\\n      </div>\\n<p>To reverse this order just change <code>a - b</code> to <code>b - a</code> like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">59</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> b <span class=\\\"token operator\\\">-</span> a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [100, 59, 20, 12, 5, 4, 1]</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"so-far-so-good-but-what-about-objects\\\"><a href=\\\"#so-far-so-good-but-what-about-objects\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>So far so good but what about objects?</h3>\\n<p>No prob, bro. Just use an object property in the comparator function:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'amet'</span><span class=\\\"token punctuation\\\">,</span>  index<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'ipsum'</span><span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'lorem'</span><span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'sit'</span><span class=\\\"token punctuation\\\">,</span>   index<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'dolor'</span><span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nobj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> a<span class=\\\"token punctuation\\\">.</span>index <span class=\\\"token operator\\\">-</span> b<span class=\\\"token punctuation\\\">.</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/*\\n0:{name: \\\"lorem\\\", index: 1}\\n1:{name: \\\"ipsum\\\", index: 2}\\n2:{name: \\\"dolor\\\", index: 3}\\n3:{name: \\\"sit\\\",   index: 4}\\n4:{name: \\\"amet\\\",  index: 5}\\n*/</span>\\n</code></pre>\\n      </div>\\n<p>Note! <code>Array.prototype.sort</code> is not immutable. It changes the original array and also returns the ordered array.</p>\\n<h3 id=\\\"mkay-but-what-if-we-have-no-index-just-a-predefined-ordered-key-list\\\"><a href=\\\"#mkay-but-what-if-we-have-no-index-just-a-predefined-ordered-key-list\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>M'kay, but what if we have no <code>index</code> just a predefined ordered key list?</h3>\\n<p>Let's come up with a use case for this. We have a list of dog names and we want to order them based on a predefined list of containing words.</p>\\n<p>It's a bit trickier this way but we Coding Ninjas eat things like this for breakfast, right?</p>\\n<p>This is how we do it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// Sort dog names. Names that contain these words should go to the front.</span>\\n<span class=\\\"token comment\\\">// Exactly in this order. \\\"dog\\\" names first then \\\"paw\\\" names and so on</span>\\n<span class=\\\"token keyword\\\">const</span> preferredWords <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"dog\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"paw\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"bark\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> \\n\\n<span class=\\\"token comment\\\">// this is the array we want to work on</span>\\n<span class=\\\"token keyword\\\">const</span> dogNames <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token string\\\">\\\"Bark Twain\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Chewbarka\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Doc McDoggins\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Droolius Caesar\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Franz Fur-dinand\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Fyodor Dogstoevsky\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Hairy Paw-ter\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Jimmy Chew\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Kareem Abdul Ja-Bark\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Mary Puppins\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"The Notorious D.O.G.\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Orville Redenbarker\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Ozzy Pawsborne\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Prince of Barkness\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Salvador Dogi\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Santa Paws\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Sarah Jessica Barker\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Sherlock Bones\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Winnie the Poodle\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Woofgang Puck\\\"</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// order names based on a custom function</span>\\ndogNames<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// find out what index the current and previous array item has</span>\\n    <span class=\\\"token keyword\\\">let</span> aIdx <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">findLastIndex</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> preferredWords<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> bIdx <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">findLastIndex</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span> preferredWords<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// non matching words have an index of -1</span>\\n    <span class=\\\"token comment\\\">// they need to go to the end</span>\\n    aIdx <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">~</span>aIdx <span class=\\\"token operator\\\">?</span> aIdx <span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">.</span>MAX_SAFE_INTEGER<span class=\\\"token punctuation\\\">;</span>\\n    bIdx <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">~</span>bIdx <span class=\\\"token operator\\\">?</span> bIdx <span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">.</span>MAX_SAFE_INTEGER<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> aIdx <span class=\\\"token operator\\\">-</span> bIdx<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Returns the index of the last found needle in the haystack\\n * Returns -1 if not found\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">findLastIndex</span><span class=\\\"token punctuation\\\">(</span>haystack<span class=\\\"token punctuation\\\">,</span> needles<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> needles<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>iMax<span class=\\\"token punctuation\\\">,</span> word<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">~</span>haystack<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLowerCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span>word<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> i <span class=\\\"token punctuation\\\">:</span> iMax<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/*\\ndogNames =>\\n[\\n    \\\"Fyodor Dogstoevsky\\\",   // \\\"dog\\\" names\\n    \\\"Doc McDoggins\\\",\\n    \\\"Salvador Dogi\\\",\\n    \\\"Hairy Paw-ter\\\",        // \\\"paw\\\" names\\n    \\\"Ozzy Pawsborne\\\",\\n    \\\"Santa Paws\\\",\\n    \\\"Orville Redenbarker\\\",  // \\\"bark\\\" names\\n    \\\"Kareem Abdul Ja-Bark\\\",\\n    \\\"Prince of Barkness\\\",\\n    \\\"Chewbarka\\\",\\n    \\\"Bark Twain\\\",\\n    \\\"Sarah Jessica Barker\\\",\\n    \\\"Jimmy Chew\\\",           // every other\\n    \\\"Franz Fur-dinand\\\",\\n    \\\"Mary Puppins\\\",\\n    \\\"Woofgang Puck\\\",\\n    \\\"Droolius Caesar\\\",\\n    \\\"Sherlock Bones\\\",\\n    \\\"Winnie the Poodle\\\",\\n    \\\"The Notorious D.O.G.\\\"\\n]\\n*/</span>\\n</code></pre>\\n      </div>\\n<p>Om nom nom... delicious! :)</p>\",\"timeToRead\":4,\"excerpt\":\"The basics Let's cover up in short how can we sort an Array in Vanilla Javascript. Suppose that we have a simple array of strings:  [\\\"ijâ€¦\",\"frontmatter\":{\"title\":\"Sorting an array of objects with pure Javascript\",\"cover\":\"https://picsum.photos/1280/900?image=237\",\"date\":\"03/22/2018\",\"category\":\"basics\",\"tags\":[\"basics\",\"js\",\"array\",\"sort\"],\"author\":\"fil\"},\"fields\":{\"slug\":\"/sorting-an-array-of-objects-with-pure-javascript\"}},\"prev\":{\"excerpt\":\"Declaration comes first In Javascript a declaration is an expression that announces the existence of a variableâ€¦\",\"frontmatter\":{\"title\":\"Terminology: declaration vs definition\",\"cover\":\"https://picsum.photos/1280/900/?random%3Fjavascriptdeclarationvsdefinition\",\"date\":\"03/24/2018\"},\"fields\":{\"slug\":\"/terminology-declaration-vs-definition\"}},\"next\":{\"excerpt\":\"In general  Enhanced object literals  are making our lives easier in a way that we can use a more intuitiveâ€¦\",\"frontmatter\":{\"title\":\"Enhanced object literals - ES6\",\"cover\":\"https://unsplash.it/1280/900/?random?enchanced\",\"date\":\"03/22/2018\"},\"fields\":{\"slug\":\"/enhanced-object-literals-es-6\"}},\"authors\":{\"edges\":[{\"node\":{\"id\":\"fil\",\"name\":\"Fil Flora\",\"image\":\"/blog/images/fil-avatar.png\",\"url\":\"http://nexiuslearning.com/\",\"bio\":\"Front-end developer @ Nexius Learning\"}}]}},\"pathContext\":{\"slug\":\"/sorting-an-array-of-objects-with-pure-javascript\",\"total\":12,\"prev\":\"/terminology-declaration-vs-definition\",\"next\":\"/enhanced-object-literals-es-6\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---sorting-an-array-of-objects-with-pure-javascript-bbe3809a98f5ab71c0ab.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3 id=\\\"the-basics\\\"><a href=\\\"#the-basics\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>The basics</h3>\\n<p>Let's cover up in short how can we sort an Array in Vanilla Javascript.</p>\\n<p>Suppose that we have a simple array of strings: <code>[\\\"ij\\\", \\\"cd\\\", \\\"kl\\\", \\\"ef\\\", \\\"gh\\\", \\\"ab\\\"]</code></p>\\n<p>If we want to simply sort it in an ascending order we can use the <code>Array.prototype.sort</code> method:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"ij\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"cd\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"kl\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"ef\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"gh\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"ab\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"ab\\\", \\\"cd\\\", \\\"ef\\\", \\\"gh\\\", \\\"ij\\\", \\\"kl\\\"]</span>\\n</code></pre>\\n      </div>\\n<p>In case a reverse order is needed we can use the <code>Array.prototype.reverse</code> for this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"ij\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"cd\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"kl\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"ef\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"gh\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"ab\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reverse</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"kl\\\", \\\"ij\\\", \\\"gh\\\", \\\"ef\\\", \\\"cd\\\", \\\"ab\\\"]</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"what-about-numbers\\\"><a href=\\\"#what-about-numbers\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>What about numbers?</h3>\\n<p>Unfortunately the simple <code>sort</code> orders array items as <code>String</code>s. So in case of an array of numbers there is no delight by writing this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">59</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1, 100, 12, 20, 4, 5, 59]</span>\\n</code></pre>\\n      </div>\\n<p>As we can see after <code>1</code> we have <code>100</code> and not <code>4</code>. Fortunately the <code>Array.prototype.sort</code> function is a <code>higher-order function</code> (which means it can receive a function as an argument) and its only argument is a <code>comparator function</code>.</p>\\n<p>This is the definition of the <code>comparator function</code> in the ECMAScript Spec:</p>\\n<blockquote>\\n<p>If <code>comparefn</code> is not undefined, it should be a function that accepts two arguments <code>x</code> and <code>y</code> and returns a <strong>negative value</strong> if <code>x &#x3C; y</code>, <strong>zero</strong> if <code>x = y</code>, or a <strong>positive value</strong> if <code>x > y</code>.</p>\\n<p>â€” <cite><a href=\\\"https://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.11\\\">Array.prototype.sort -- ecma-international.org</a></cite></p>\\n</blockquote>\\n<p>The easiest win for ordering the array by numbers is this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">59</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> a <span class=\\\"token operator\\\">-</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1, 4, 5, 12, 20, 59, 100]</span>\\n</code></pre>\\n      </div>\\n<p>To reverse this order just change <code>a - b</code> to <code>b - a</code> like this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">12</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">59</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> b <span class=\\\"token operator\\\">-</span> a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [100, 59, 20, 12, 5, 4, 1]</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"so-far-so-good-but-what-about-objects\\\"><a href=\\\"#so-far-so-good-but-what-about-objects\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>So far so good but what about objects?</h3>\\n<p>No prob, bro. Just use an object property in the comparator function:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'amet'</span><span class=\\\"token punctuation\\\">,</span>  index<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'ipsum'</span><span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'lorem'</span><span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'sit'</span><span class=\\\"token punctuation\\\">,</span>   index<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">4</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span> name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'dolor'</span><span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nobj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> a<span class=\\\"token punctuation\\\">.</span>index <span class=\\\"token operator\\\">-</span> b<span class=\\\"token punctuation\\\">.</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/*\\n0:{name: \\\"lorem\\\", index: 1}\\n1:{name: \\\"ipsum\\\", index: 2}\\n2:{name: \\\"dolor\\\", index: 3}\\n3:{name: \\\"sit\\\",   index: 4}\\n4:{name: \\\"amet\\\",  index: 5}\\n*/</span>\\n</code></pre>\\n      </div>\\n<p>Note! <code>Array.prototype.sort</code> is not immutable. It changes the original array and also returns the ordered array.</p>\\n<h3 id=\\\"mkay-but-what-if-we-have-no-index-just-a-predefined-ordered-key-list\\\"><a href=\\\"#mkay-but-what-if-we-have-no-index-just-a-predefined-ordered-key-list\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>M'kay, but what if we have no <code>index</code> just a predefined ordered key list?</h3>\\n<p>Let's come up with a use case for this. We have a list of dog names and we want to order them based on a predefined list of containing words.</p>\\n<p>It's a bit trickier this way but we Coding Ninjas eat things like this for breakfast, right?</p>\\n<p>This is how we do it:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// Sort dog names. Names that contain these words should go to the front.</span>\\n<span class=\\\"token comment\\\">// Exactly in this order. \\\"dog\\\" names first then \\\"paw\\\" names and so on</span>\\n<span class=\\\"token keyword\\\">const</span> preferredWords <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"dog\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"paw\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"bark\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> \\n\\n<span class=\\\"token comment\\\">// this is the array we want to work on</span>\\n<span class=\\\"token keyword\\\">const</span> dogNames <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token string\\\">\\\"Bark Twain\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Chewbarka\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Doc McDoggins\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Droolius Caesar\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Franz Fur-dinand\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Fyodor Dogstoevsky\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Hairy Paw-ter\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Jimmy Chew\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Kareem Abdul Ja-Bark\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Mary Puppins\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"The Notorious D.O.G.\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Orville Redenbarker\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Ozzy Pawsborne\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Prince of Barkness\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Salvador Dogi\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Santa Paws\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Sarah Jessica Barker\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Sherlock Bones\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Winnie the Poodle\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"Woofgang Puck\\\"</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// order names based on a custom function</span>\\ndogNames<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// find out what index the current and previous array item has</span>\\n    <span class=\\\"token keyword\\\">let</span> aIdx <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">findLastIndex</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> preferredWords<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> bIdx <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">findLastIndex</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">,</span> preferredWords<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token comment\\\">// non matching words have an index of -1</span>\\n    <span class=\\\"token comment\\\">// they need to go to the end</span>\\n    aIdx <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">~</span>aIdx <span class=\\\"token operator\\\">?</span> aIdx <span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">.</span>MAX_SAFE_INTEGER<span class=\\\"token punctuation\\\">;</span>\\n    bIdx <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">~</span>bIdx <span class=\\\"token operator\\\">?</span> bIdx <span class=\\\"token punctuation\\\">:</span> Number<span class=\\\"token punctuation\\\">.</span>MAX_SAFE_INTEGER<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> aIdx <span class=\\\"token operator\\\">-</span> bIdx<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">/**\\n * Returns the index of the last found needle in the haystack\\n * Returns -1 if not found\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">findLastIndex</span><span class=\\\"token punctuation\\\">(</span>haystack<span class=\\\"token punctuation\\\">,</span> needles<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> needles<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">reduce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>iMax<span class=\\\"token punctuation\\\">,</span> word<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">~</span>haystack<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLowerCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span>word<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">?</span> i <span class=\\\"token punctuation\\\">:</span> iMax<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">/*\\ndogNames =>\\n[\\n    \\\"Fyodor Dogstoevsky\\\",   // \\\"dog\\\" names\\n    \\\"Doc McDoggins\\\",\\n    \\\"Salvador Dogi\\\",\\n    \\\"Hairy Paw-ter\\\",        // \\\"paw\\\" names\\n    \\\"Ozzy Pawsborne\\\",\\n    \\\"Santa Paws\\\",\\n    \\\"Orville Redenbarker\\\",  // \\\"bark\\\" names\\n    \\\"Kareem Abdul Ja-Bark\\\",\\n    \\\"Prince of Barkness\\\",\\n    \\\"Chewbarka\\\",\\n    \\\"Bark Twain\\\",\\n    \\\"Sarah Jessica Barker\\\",\\n    \\\"Jimmy Chew\\\",           // every other\\n    \\\"Franz Fur-dinand\\\",\\n    \\\"Mary Puppins\\\",\\n    \\\"Woofgang Puck\\\",\\n    \\\"Droolius Caesar\\\",\\n    \\\"Sherlock Bones\\\",\\n    \\\"Winnie the Poodle\\\",\\n    \\\"The Notorious D.O.G.\\\"\\n]\\n*/</span>\\n</code></pre>\\n      </div>\\n<p>Om nom nom... delicious! :)</p>\",\"timeToRead\":4,\"excerpt\":\"The basics Let's cover up in short how can we sort an Array in Vanilla Javascript. Suppose that we have a simple array of strings:  [\\\"ijâ€¦\",\"frontmatter\":{\"title\":\"Sorting an array of objects with pure Javascript\",\"cover\":\"https://picsum.photos/1280/900?image=237\",\"date\":\"03/22/2018\",\"category\":\"basics\",\"tags\":[\"basics\",\"js\",\"array\",\"sort\"],\"author\":\"fil\"},\"fields\":{\"slug\":\"/sorting-an-array-of-objects-with-pure-javascript\"}},\"prev\":{\"excerpt\":\"Declaration comes first In Javascript a declaration is an expression that announces the existence of a variableâ€¦\",\"frontmatter\":{\"title\":\"Terminology: declaration vs definition\",\"cover\":\"https://picsum.photos/1280/900/?random%3Fjavascriptdeclarationvsdefinition\",\"date\":\"03/24/2018\"},\"fields\":{\"slug\":\"/terminology-declaration-vs-definition\"}},\"next\":{\"excerpt\":\"In general  Enhanced object literals  are making our lives easier in a way that we can use a more intuitiveâ€¦\",\"frontmatter\":{\"title\":\"Enhanced object literals - ES6\",\"cover\":\"https://unsplash.it/1280/900/?random?enchanced\",\"date\":\"03/22/2018\"},\"fields\":{\"slug\":\"/enhanced-object-literals-es-6\"}},\"authors\":{\"edges\":[{\"node\":{\"id\":\"fil\",\"name\":\"Fil Flora\",\"image\":\"/blog/images/fil-avatar.png\",\"url\":\"http://nexiuslearning.com/\",\"bio\":\"Front-end developer @ Nexius Learning\"}}]}},\"pathContext\":{\"slug\":\"/sorting-an-array-of-objects-with-pure-javascript\",\"total\":12,\"prev\":\"/terminology-declaration-vs-definition\",\"next\":\"/enhanced-object-literals-es-6\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/sorting-an-array-of-objects-with-pure-javascript.json\n// module id = 487\n// module chunks = 40027628985182"],"sourceRoot":""}