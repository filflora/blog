webpackJsonp([0x9243b10f21c3],{514:function(e,n){e.exports={data:{markdownRemark:{html:'<h3 id="premise"><a href="#premise" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Premise</h3>\n<blockquote>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token string">"string"</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// false. </span>\n</code></pre>\n      </div>\n<p>— <cite><a href="https://wtfjs.com/wtfs/2010-02-13-string-is-not-string">wtfjs.com - string is not string</a></cite></p>\n</blockquote>\n<h3 id="explanation"><a href="#explanation" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Explanation</h3>\n<p>This example mixes the two main type categories, primitives and objects. The string <code>"foo"</code> is not the same as <code>new String("foo")</code>. The first one is a <code>Primitive</code> value, the second is an <code>Object</code>.</p>\n<h3 id="whats-the-difference-of-a-string-primitive-and-a-string-object"><a href="#whats-the-difference-of-a-string-primitive-and-a-string-object" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>What\'s the difference of a <code>String primitive</code> and a <code>String object</code>?</h3>\n<p>A <code>string primitive</code> is a <code>string literal</code> denoted by single or double quotes (e.g. <code>\'foo\'</code> and <code>"bar"</code>) and result from a <code>String(...)</code> call in a non-constructor context (without the <code>new</code> keyword). These primitives are automatically converted to <code>Sting object</code> so we can use all the methods like <code>.toUpperCase()</code>, <code>.concat()</code>, <code>.replace()</code> and so on on them. </p>\n<p>This even works when we call methods directly on a <code>string literal</code> like this: </p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token string">"lorem ipsum"</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// LOREM IPSUM</span>\n</code></pre>\n      </div>\n<p>Note: </p>\n<ul>\n<li>The word <code>literal</code> refers to a syntax for creating data without using a constructor.</li>\n<li>The word <code>primitive</code> refers to a non-object data.</li>\n<li><code>JSON.parse(\'"foo"\')</code>, <code>.toUpperCase()</code>, <code>.concat()</code>, <code>.replace()</code> and other string methods are returning primitives too</li>\n</ul>\n<p>In case you are wondering, a string object can be converted to a primitive with the <code>.valueOf()</code> method. This method is used even internally when coertion happens. </p>\n<p>This is why:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str_primitive <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>\n<span class="token keyword">typeof</span> str_primitive<span class="token punctuation">;</span> <span class="token comment">// "string"</span>\nstr_primitive <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n<span class="token keyword">let</span> str_object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">typeof</span> str_object<span class="token punctuation">;</span> <span class="token comment">// "object"</span>\nstr_object <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre>\n      </div>\n<h3 id="further-reading"><a href="#further-reading" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Further reading:</h3>\n<ul>\n<li><a href="https://javascriptrefined.io/the-wrapper-object-400311b29151">The wrapper object - javascriptrefined.io</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">String - mozilla.org</a></li>\n<li><a href="https://stackoverflow.com/questions/17256182/what-is-the-difference-between-string-literals-and-string-objects-in-javascript">Difference between string literals and string objects - stackoverflow</a></li>\n</ul>',timeToRead:2,excerpt:"Premise —   wtfjs.com - string is not string Explanation This example mixes the two main type categories, primitives and objects. The string…",frontmatter:{title:"WTF JS explanation - string is not string",cover:"https://unsplash.it/1280/900/?random?stringisnotstring",date:"03/23/2018",category:"explanation",tags:["explanation","js","wtf-js","primitives"],author:"fil"},fields:{slug:"/wtf-js-explanation-string-is-not-string"}},prev:{excerpt:"What is specificity? Specificity is the means by which browsers decide which CSS property values are the most…",frontmatter:{title:"About CSS specificity",cover:"https://unsplash.it/1280/900/?random?specificity",date:"03/07/2018"},fields:{slug:"/about-css-specificity"}},next:{excerpt:"In general  Enhanced object literals  are making our lives easier in a way that we can use a more intuitive…",frontmatter:{title:"Enhanced object literals - ES6",cover:"https://unsplash.it/1280/900/?random?enchanced",date:"03/22/2018"},fields:{slug:"/enhanced-object-literals-es-6"}},authors:{edges:[{node:{id:"fil",name:"Fil Flora",image:"/blog/images/fil-avatar.png",url:"http://nexiuslearning.com/",bio:"Front-end developer @ Nexius Learning"}}]}},pathContext:{slug:"/wtf-js-explanation-string-is-not-string",total:12,prev:"/about-css-specificity",next:"/enhanced-object-literals-es-6"}}}});
//# sourceMappingURL=path---wtf-js-explanation-string-is-not-string-98d418b6965ae865c050.js.map