webpackJsonp([1144844959011],{491:function(e,a){e.exports={data:{markdownRemark:{html:'<p>As I was trying to understand the exact process how a <a href="https://www.ecma-international.org/ecma-262/5.1/#sec-11.4.9">logical NOT unary</a> is working in JavaScript I encountered the following line: <code>ToBoolean(GetValue(expr))</code>. What is <code>GetValue()</code> doing? It is called more than 90 times in the spec, it must be a quite basic function.</p>\n<p>However the clarity over <code>GetValue()</code> didn\'t came so I asked for help on <a href="https://stackoverflow.com/questions/49468453/ecmascript-what-is-the-result-of-getvalue/49468529#49468529">stackoverflow</a>. Fortunately <code>Bergi</code> came to set me on the path and hopefully my understanding of this matter is correct. So please take this post with a grain of salt...</p>\n<h1 id="understanding-getvaluev-from-the-ecmascript-spec"><a href="#understanding-getvaluev-from-the-ecmascript-spec" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Understanding <code>GetValue(V)</code> from the ECMAScript Spec</h1>\n<p>Lets understand the first two lines of the spec</p>\n<blockquote>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token number">1.</span> If <span class="token template-string"><span class="token string">`Type(V)`</span></span> is not <span class="token template-string"><span class="token string">`Reference`</span></span><span class="token punctuation">,</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`V`</span></span><span class="token punctuation">.</span>\n<span class="token number">2.</span> Let <span class="token template-string"><span class="token string">`base`</span></span> be the result <span class="token keyword">of</span> calling <span class="token template-string"><span class="token string">`GetBase(V)`</span></span><span class="token punctuation">.</span>\n</code></pre>\n      </div>\n<p>— <cite><a href="https://www.ecma-international.org/ecma-262/5.1/#sec-8.7.1">GetValue - Ecma-international</a></cite></p>\n</blockquote>\n<p>Okay... another question. What is a <code>Reference</code> in Javascript? </p>\n<blockquote>\n<p>A <strong>Reference</strong> is a resolved name binding. A Reference consists of three components, the <code>base value</code>, the <code>referenced name</code> and the Boolean valued <code>strict reference flag</code>. The base value is either <code>undefined</code>, an <code>Object</code>, a <code>Boolean</code>, a <code>String</code>, a <code>Number</code>, or an <code>environment record</code> (10.2.1). A base value of undefined indicates that the reference could not be resolved to a binding. The referenced name is a String.</p>\n<p>— <cite><a href="https://www.ecma-international.org/ecma-262/5.1/#sec-8.7">The Reference Specification Type</a></cite></p>\n</blockquote>\n<p>I think an example would be helpful here:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// [1, 2] is a plain value (NOT a primitive, just a simple value)</span>\n<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n</code></pre>\n      </div>\n<p>This value can be <code>undefined</code>, <code>Object</code>, <code>Boolean</code>, <code>String</code>, <code>Number</code> or an <code>environment record</code>.</p>\n<p>When a <code>GetValue(foo)</code> is called the result would be <code>[1, 2]</code> because of the first line.</p>\n<p>This is called a reference:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">var</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n</code></pre>\n      </div>\n<p>The <code>base value</code> of the reference is <code>[1, 2]</code> and the <code>referenced name</code> is <code>foo</code>.</p>\n<p>When a <code>GetValue(bar)</code> is called the result would be <code>[1, 2]</code> because now we have a reference and the <code>GetBase(bar)</code> is called.</p>\n<p>Now the question is, how can an identifier have a reference with a primitive type? Couldn\'t figure this out so far...</p>',timeToRead:2,excerpt:"As I was trying to understand the exact process how a  logical NOT unary  is working in JavaScript I encountered the following line…",frontmatter:{title:"Javascript Spec - GetValue",cover:"https://unsplash.it/1280/900/?random?ecmascriptgetvalue",date:"03/25/2018",category:"explanation",tags:["explanation","javascript","ecmascript"],author:"fil"},fields:{slug:"/javascript-spec-get-value"}},prev:{excerpt:"What is specificity? Specificity is the means by which browsers decide which CSS property values are the most…",frontmatter:{title:"About CSS specificity",cover:"https://unsplash.it/1280/900/?random?specificity",date:"03/07/2018"},fields:{slug:"/about-css-specificity"}},next:{excerpt:"Premise Arrays evaluate as true in a boolean condition so this does make some sense even if it doesn't read very…",frontmatter:{title:"WTF JS explanation - careful",cover:"https://unsplash.it/1280/900/?random?careful",date:"03/25/2018"},fields:{slug:"/wtf-js-explanation-careful"}},authors:{edges:[{node:{id:"fil",name:"Fil Flora",image:"/blog/images/fil-avatar.png",url:"http://nexiuslearning.com/",bio:"Front-end developer @ Nexius Learning"}}]}},pathContext:{slug:"/javascript-spec-get-value",total:15,prev:"/about-css-specificity",next:"/wtf-js-explanation-careful"}}}});
//# sourceMappingURL=path---javascript-spec-get-value-c9ef957c84c0e5b893d6.js.map